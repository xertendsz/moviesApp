{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Imane\\\\OneDrive\\\\Desktop\\\\CS\\\\Web\\\\movies\\\\front\\\\src\\\\functions\\\\context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// In your context provider (useAuth.js), set the initial value from local storage and update it when the app loads.\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport function AuthProvider({\n  children\n}) {\n  _s();\n  const [authenticated, setAuthenticated] = useState(() => {\n    // Initialize 'authenticated' state from local storage when the app loads.\n    const isAuthenticated = localStorage.getItem('authenticated');\n    return isAuthenticated === 'true';\n  });\n  useEffect(() => {\n    // Update the context value when the state changes.\n    const isAuthenticated = localStorage.getItem('authenticated');\n    setAuthenticated(isAuthenticated === 'true');\n  }, []);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      authenticated,\n      setAuthenticated\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(AuthProvider, \"EOo1z4H69yqEs1rVUvW1yMFljyc=\");\n_c = AuthProvider;\nexport function useAuth() {\n  _s2();\n  return useContext(AuthContext);\n}\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","authenticated","setAuthenticated","isAuthenticated","localStorage","getItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Imane/OneDrive/Desktop/CS/Web/movies/front/src/functions/context.js"],"sourcesContent":["// In your context provider (useAuth.js), set the initial value from local storage and update it when the app loads.\r\n\r\nimport React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport function AuthProvider({ children }) {\r\n  const [authenticated, setAuthenticated] = useState(() => {\r\n    // Initialize 'authenticated' state from local storage when the app loads.\r\n    const isAuthenticated = localStorage.getItem('authenticated');\r\n    return isAuthenticated === 'true';\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Update the context value when the state changes.\r\n    const isAuthenticated = localStorage.getItem('authenticated');\r\n    setAuthenticated(isAuthenticated === 'true');\r\n  }, []);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ authenticated, setAuthenticated }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n"],"mappings":";;;AAAA;;AAEA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9E,MAAMC,WAAW,gBAAGN,aAAa,CAAC,CAAC;AAEnC,OAAO,SAASO,YAAYA,CAAC;EAAEC;AAAS,CAAC,EAAE;EAAAC,EAAA;EACzC,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,MAAM;IACvD;IACA,MAAMU,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC7D,OAAOF,eAAe,KAAK,MAAM;EACnC,CAAC,CAAC;EAEFT,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,eAAe,GAAGC,YAAY,CAACC,OAAO,CAAC,eAAe,CAAC;IAC7DH,gBAAgB,CAACC,eAAe,KAAK,MAAM,CAAC;EAC9C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEP,OAAA,CAACC,WAAW,CAACS,QAAQ;IAACC,KAAK,EAAE;MAAEN,aAAa;MAAEC;IAAiB,CAAE;IAAAH,QAAA,EAC9DA;EAAQ;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B;AAACX,EAAA,CAlBeF,YAAY;AAAAc,EAAA,GAAZd,YAAY;AAoB5B,OAAO,SAASe,OAAOA,CAAA,EAAG;EAAAC,GAAA;EACxB,OAAOtB,UAAU,CAACK,WAAW,CAAC;AAChC;AAACiB,GAAA,CAFeD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}